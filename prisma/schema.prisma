// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    password  String
    name      String
    orders    Order[]
    cart      Cart?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    price       Float
    stock       Int         @default(0)
    categoryId  String      @db.ObjectId
    category    Category?   @relation(fields: [categoryId], references: [id])
    cartItems   CartItem[]
    orderItems  OrderItem[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Category {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Order {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    userId      String      @db.ObjectId
    user        User?       @relation(fields: [userId], references: [id])
    items       OrderItem[]
    totalAmount Float
    status      String      @default("Pending")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model OrderItem {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    orderId   String   @db.ObjectId
    order     Order?   @relation(fields: [orderId], references: [id])
    productId String   @db.ObjectId
    product   Product? @relation(fields: [productId], references: [id])
    quantity  Int      @default(1)
    price     Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    userId    String     @unique @db.ObjectId
    user      User?      @relation(fields: [userId], references: [id])
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model CartItem {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    cartId    String   @db.ObjectId
    cart      Cart?    @relation(fields: [cartId], references: [id])
    productId String   @db.ObjectId
    product   Product? @relation(fields: [productId], references: [id])
    quantity  Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
